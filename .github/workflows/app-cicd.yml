name: Application CI

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]


jobs:
  build_and_test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' 
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
#     - name: Add dotnet package
#       if: ${{ success() }}
#       run: |
#         find ./ -name *UT.csproj -execdir dotnet add package coverlet.msbuild \;
#         find ./ -name *UT.csproj -execdir dotnet add package FluentAssertions \;
    - name: Test
      if: ${{ success() }}
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx --no-restore --verbosity normal
    
    - name: Generate report
      if: ${{ success() }}
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool 
        ~/.dotnet/tools/reportgenerator "-reports:./TimeManagementUT/coverage.opencover.xml" "-targetdir:./CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    
    - name: code analysis using sonar cloud
      if: ${{ success() }}
      run: |
        dotnet tool install --global dotnet-sonarscanner 
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx --no-restore --verbosity normal
        dotnet build-server shutdown
        dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT_KEY }} /o:${{ secrets.SONAR_ORG_KEY }} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{ secrets.SONAR_TOKEN }} /d:sonar.cs.opencover.reportsPaths="./TimeManagementUT/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="./TimeManagementUT/TestResults/*.trx"
        dotnet build ./xunit_practice_two.sln
        dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish_docker_image:
#     needs: [build_and_test]
    if: github.event_name == 'push' 
    env:
      CONTAINER_IMAGE: sample-app-${GITHUB_REF##*/}:${GITHUB_SHA::8}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build docker image for develop
#         if: github.ref == 'refs/heads/develop'
        run: |
          echo ${GITHUB_BASE_REF}
          echo 'middle line'
          echo ${GITHUB_REF##*/}
          echo $CONTAINER_IMAGE
          docker build . --file Dockerfile --tag ${CONTAINER_IMAGE} 
#       - name: Build docker image for master
#         if: github.ref == 'refs/heads/master'
#         run: |
#           docker build . --file Dockerfile --tag $CONTAINER_IMAGE 
